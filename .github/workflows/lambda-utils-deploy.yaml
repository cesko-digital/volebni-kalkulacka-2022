name: "Build lambda-utils Docker and deploy to Lambda"
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "lambda-utils/**"

env:
  region: ${{ secrets.AWS_REGION }}
  repository: ${{ secrets.AWS_REPOSITORY }}
  serviceName: "lambda-utils"
jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - name: "Checkout"
        uses: actions/checkout@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: "Login to Repository"
        run: |
          aws ecr get-login-password --region ${{ env.region }} | docker login --username AWS --password-stdin ${{ env.repository }}/${{ env.serviceName }}
      - name: "Build Docker image"
        run: |
          docker build -t ${{ env.serviceName }} .
        working-directory: lambda-utils
      - name: "Push Docker image to repository"
        run: |
          docker tag ${{ env.serviceName }}:latest ${{ env.repository }}/${{ env.serviceName }}:latest
          docker push ${{ env.repository }}/${{ env.serviceName }}:latest
        working-directory: lambda-utils
      - name: "Deploy new function"
        run: |
          aws lambda update-function-code --region=eu-central-1 --image-uri=${{ env.repository }}/${{ env.serviceName }}:latest --publish --function-name lambda-inject-meta
          aws lambda update-function-code --region=eu-central-1 --image-uri=${{ env.repository }}/${{ env.serviceName }}:latest --publish --function-name lambda-gen-ogimage
      - name: "Invalidate CloudFront cache"
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DEPLOYMENT_ID }} --paths "/image/*" "/share/*"
