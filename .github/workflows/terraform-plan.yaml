name: "Terraform Plan on PR"
on:
  pull_request:
    branches:
      - "main"
    paths:
      - "infrastructure/aws/**"
env:
  tf_version: "1.1.9"
  tf_working_dir: "infrastructure/aws"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_aws-region: ${{ secrets.AWS_REGION }}
  TF_VAR_frontend-bucket-name: ${{ secrets.FRONTEND_BUCKET_NAME }}
  TF_VAR_domain: ${{ secrets.DOMAIN }}
  TF_VAR_domain-certificate-arn: ${{ secrets.DOMAIN_CERTIFICATE_ARN }}
  TF_VAR_data-bucket-name: ${{ secrets.DATA_BUCKET_NAME }}
  TF_VAR_newrelic-license-key: ${{ secrets.NEWRELIC_LICENSE_KEY }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v1
      - name: "Install Terraform"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}

      - name: "Terraform init"
        run: |
          terraform init
        working-directory: ${{ env.tf_working_dir }}

      - name: "Terraform Plan"
        id: plan
        run: |
          terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ${{ env.tf_working_dir }}

      - name: "Update Pull Request"
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
